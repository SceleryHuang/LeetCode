class Solution:
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
#方法一       
#         length = len(digits)
#         number =0
#         i= length-1
#         while i>=0:
#             number += digits[i]*10**(length-i-1)        
#             i-=1
#         number +=1
        
#         digits2 =[]
#         while number>0:
#             pop = number%10
#             number//=10
#             digits2.append(pop)
        
#         digits2.reverse()
#         return digits2
        
        #自己做出来的，我真的要哭了
        
# 这道题其实很简单，只存在 进位问题，那么我们考虑一下，进位都存在哪些情况：

# 只末尾进位，如19
# 末尾+中间连续进位，如199
# 末尾+中间+首位进位，如999
# 对于 1 而言，我们只需要令9->0，1->2即可

# 对于 2 而言，我们需要令9->0，9->0，1->2

# 对于 3 而言，物品们需要令9->0，9->0，9->0并扩充数组，首位置 1

# 因此我们只需要从后向前遍历，逢9置0，非9加1，最后考虑是否扩充数组即可


#方法二

        length = len(digits)
        i = length-1
        while i>=0:
            if(digits[i]<9):
                digits[i]+=1
                return digits
            digits[i] = 0
            i-=1
            
        result=[0]*(length+1)
        result[0]=1
        return result
        
            
        
    
        
#         class Solution {
#         public int[] plusOne(int[] digits) {
#             int n = digits.length;
#             for(int i=n-1;i>=0;i--){
#                 //非9加1
#                 if(digits[i]<9){
#                     digits[i]++;
#                     return digits;
#                 }
#                 //逢9置0
#                 digits[i]=0;
#             }
#             //全部为9，则需要数组扩充1位
#             int[] result = new int[n+1];
#             result[0] = 1;
#             return result;
#         }
#     }
    
