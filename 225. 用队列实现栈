# class MyStack:

#     def __init__(self):
#         """
#         Initialize your data structure here.
#         """
#         self.stack = []

#     def push(self, x):
#         """
#         Push element x onto stack.
#         :type x: int
#         :rtype: void
#         """
#         self.stack.append(x)

#     def pop(self):
#         """
#         Removes the element on top of the stack and returns that element.
#         :rtype: int
#         """
#         if self.stack == []:
#             return False
#         else:
#             return self.stack.pop()

#     def top(self):
#         """
#         Get the top element.
#         :rtype: int
#         """
#         if self.stack == []:
#             return False
#         else:
#             return self.stack[-1]

#     def empty(self):
#         """
#         Returns whether the stack is empty.
#         :rtype: bool
#         """
#         if self.stack == []:
#             return True
#         else:
#             return False



# # Your MyStack object will be instantiated and called as such:
# # obj = MyStack()
# # obj.push(x)
# # param_2 = obj.pop()
# # param_3 = obj.top()
# # param_4 = obj.empty()



#用两个队列实现栈

class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue1 = []
        self.queue2 = []

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: void
        """
        self.queue1.insert(0,x)

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        for i in range(len(self.queue1)-1):
            self.queue2.insert(0,self.queue1.pop())
        res = self.quque1.pop()
        self.quque1 = self.queue2
        self.quque2 = []
        return res

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        self.queue2 = self.queue1[:]
        for i in range(len(self.queue1)-1):
            self.queue1.pop()
        res = self.queue1[-1]
        self.quque1 = self.queue2
        self.quque2 = []
        return res



    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        if len(self.queue1) == 0:
            return True
        else:
            return False



# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
